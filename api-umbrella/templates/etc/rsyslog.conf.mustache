# Allow for longer message sizes to handle the JSON data containing long URLs
# or HTTP headers.
global(maxMessageSize="32k")

global(workDirectory="{{db_dir}}/rsyslog")

# Load Modules
module(load="imfile")
module(load="imtcp" MaxSessions="500")
module(load="mmjsonparse")
module(load="mmutf8fix")
{{#log._destination_console?}}
module(load="omstdout")
{{/log._destination_console?}}
{{#analytics._output_elasticsearch?}}
module(load="omelasticsearch")
{{/analytics._output_elasticsearch?}}

# Define templates for ElasticSearch output.
{{#elasticsearch._index_partition_monthly?}}
template(name="elasticsearch-index" type="string" string="{{elasticsearch.index_name_prefix}}-logs-write-%timereported:1:7:date-rfc3339,date-utc%")
{{/elasticsearch._index_partition_monthly?}}
{{#elasticsearch._index_partition_daily?}}
template(name="elasticsearch-index" type="string" string="{{elasticsearch.index_name_prefix}}-logs-write-%timereported:1:10:date-rfc3339,date-utc%")
{{/elasticsearch._index_partition_daily?}}
template(name="elasticsearch-id" type="subtree" subtree="$!raw!id")
template(name="elasticsearch-json-record" type="subtree" subtree="$!usr!es")
template(name="all-json-record" type="list") {
  property(name="$!raw") constant(value="\n")
}

template(name="template-stdout" type="list") {
  constant(value="[")
  property(name="syslogtag")
  constant(value="]")
  property(name="msg" spifno1stsp="on")
  property(name="msg" droplastlf="on")
  constant(value="\n")
}

ruleset(name="analytics-ruleset" queue.type="FixedArray" queue.size="5000") {
  include(file="{{etc_dir}}/rsyslog.d/analytics.conf")
}

{{#log._destination_console?}}
  ruleset(name="logs-ruleset" queue.type="FixedArray" queue.size="5000") {
    action(
      name="output-logs-stdout"
      type="omstdout"
      template="template-stdout"
    )
  }

  input(type="imfile" file="{{log_dir}}/trafficserver/access.log" tag="trafficserver-access" ruleset="logs-ruleset")
  input(type="imfile" file="{{log_dir}}/trafficserver/diags.log" tag="trafficserver-diags" ruleset="logs-ruleset")
  input(type="imfile" file="{{log_dir}}/trafficserver/error.log" tag="trafficserver-error" ruleset="logs-ruleset")
  input(type="imfile" file="{{log_dir}}/trafficserver/manager.log" tag="trafficserver-manager" ruleset="logs-ruleset")
  input(type="imfile" file="{{log_dir}}/trafficserver/traffic.out" tag="trafficserver-out" ruleset="logs-ruleset")
{{/log._destination_console?}}

# TCP Input
input(type="imtcp" address="{{rsyslog.host}}" port="{{rsyslog.port}}" ruleset="analytics-ruleset")

ruleset(name="stats-ruleset" queue.type="FixedArray" queue.size="5000") {
  {{#log._destination_console?}}
    action(
      name="output-stats-stdout"
      type="omstdout"
      template="template-stdout"
    )
  {{/log._destination_console?}}
  {{^log._destination_console?}}
    action(
      name="output-stats-file"
      type="omfile"
      file="{{log_dir}}/rsyslog/stats.log"
    )
  {{/log._destination_console?}}
}

# Output queue statistics periodically so the health of the queue can be
# inspected.
module(
  load="impstats"
  interval="60"
  resetCounters="on"
  log.syslog="on"
  ruleset="stats-ruleset"
)
