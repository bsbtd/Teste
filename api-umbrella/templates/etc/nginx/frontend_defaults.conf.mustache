{{#router.global_rate_limits.ip_connections}}
# Limit the number of simultaneous connections per IP address to {{router.global_rate_limits.ip_connections}}.
limit_conn api_umbrella_conn_addr_zone {{router.global_rate_limits.ip_connections}};
{{/router.global_rate_limits.ip_connections}}

{{#router.global_rate_limits.ip_rate}}
# After the {{router.global_rate_limits.ip_rate}} rate is reached, allow a sizable burst before
# completely terminating requests at this router level. This is so we can
# generally rely on API Umbrella Gatekeeper for rate limiting, but still
# throttle traffic to the Gatekeeper.
limit_req zone=api_umbrella_req_addr_zone{{#router.global_rate_limits.ip_burst}} burst={{router.global_rate_limits.ip_burst}}{{/router.global_rate_limits.ip_burst}} nodelay;
{{/router.global_rate_limits.ip_rate}}

# Only retry backends in the event of connection errors (and not also
# connection timeouts as is the default). This prevents slow backend timeouts
# triggering multiple requests (since there are usually multiple gatekeeper
# processes setup).
proxy_next_upstream error;

# Don't buffer proxied requests to allow for streaming APIs.
proxy_buffering off;

location @banned_pit {
  echo_sleep {{ban.response.delay}};
  echo "{{ban.response.message}}";
  echo_flush;
}

location = /api-umbrella-banned {
  internal;
  error_page 403 ={{ban.response.status_code}} @banned_pit;
  return 403;
}

if ($banned_ip) {
  rewrite .* /api-umbrella-banned last;
}

if ($banned_user_agent) {
  rewrite .* /api-umbrella-banned last;
}

# Clear any headers used inside API Umbrella that should not be possible to set
# by an external client.
more_clear_input_headers X-Api-Umbrella-Allow-Authorization-Caching;

{{#_development_env?}}
  location /livereload.js {
    proxy_pass http://127.0.0.1:{{ember_server.live_reload_port}};
  }

  location /livereload {
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_pass http://127.0.0.1:{{ember_server.live_reload_port}};
  }

  location /ember-cli-live-reload.js {
    proxy_pass http://127.0.0.1:{{ember_server.port}};
  }
{{/_development_env?}}
